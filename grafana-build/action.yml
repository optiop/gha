name: Grafana CI Action
description: |
  This action is used to build, lint and run unit tests for the Grafana plugins.
inputs:
  plugin-directory:
    description: 'The directory where the plugin is located'
    required: true
runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Install dependencies
      shell: bash
      run: npm ci
      working-directory: ${{ inputs.plugin-directory }}

    - name: Check types
      shell: bash
      run: npm run typecheck
      working-directory: ${{ inputs.plugin-directory }}

    - name: Lint
      run: npm run lint
      shell: bash
      working-directory: ${{ inputs.plugin-directory }}

    - name: Unit tests
      shell: bash
      run: npm run test:ci
      working-directory: ${{ inputs.plugin-directory }}

    - name: Build frontend
      shell: bash
      run: npm run build
      working-directory: ${{ inputs.plugin-directory }}

    - name: Check for backend
      shell: bash
      id: check-for-backend
      working-directory: ${{ inputs.plugin-directory }}
      run: |
        if [ -f "Magefile.go" ]
        then
          echo "has-backend=true" >> $GITHUB_OUTPUT
        fi


    - name: Setup Go environment
      if: steps.check-for-backend.outputs.has-backend == 'true'
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Test backend
      if: steps.check-for-backend.outputs.has-backend == 'true'
      uses: magefile/mage-action@v3
      with:
        version: latest
        args: coverage
        workdir: ${{ inputs.plugin-directory }}

    - name: Build backend
      if: steps.check-for-backend.outputs.has-backend == 'true'
      uses: magefile/mage-action@v3
      with:
        version: latest
        args: buildAll
        workdir: ${{ inputs.plugin-directory }}

    - name: Check for E2E
      shell: bash
      id: check-for-e2e
      working-directory: ${{ inputs.plugin-directory }}
      run: |
        if [ -f "playwright.config.ts" ]
        then
          echo "has-e2e=true" >> $GITHUB_OUTPUT
        fi

    - name: Sign plugin
      shell: bash
      working-directory: ${{ inputs.plugin-directory }}
      run: ROOT_URLS=http://localhost:3000 npm run sign
      if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN != '' }}

    # required jq to parse plugin.json
    # sudo apt install jq
    - name: Get plugin metadata
      shell: bash
      id: metadata
      working-directory: ${{ inputs.plugin-directory }}
      run: |
        export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
        export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
        export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip

        echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
        echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
        echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT

    - name: Package plugin
      shell: bash
      id: package-plugin
      working-directory: ${{ inputs.plugin-directory }}
      run: |
        mv dist ${{ steps.metadata.outputs.plugin-id }}
        zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r

    - name: Archive Build
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.metadata.outputs.plugin-id }}-${{ steps.metadata.outputs.plugin-version }}
        path: ${{ env.WORKING_DIRECTORY }}/${{ steps.metadata.outputs.plugin-id }}
        retention-days: 5
