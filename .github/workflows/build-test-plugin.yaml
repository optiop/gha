name: Build and Test Plugins

on:
  workflow_call:

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set matrix
        id: set-matrix
        run: |
          matrix=$(find . -type d -name 'optiop*' | jq -R '{WORKING_DIRECTORY: .}' | jq -s '{include: .}' | tr -d '\n')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

  build:
    name: Build, lint and unit tests
    needs: generate-matrix
    runs-on: self-hosted
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    defaults:
      run:
        working-directory: ${{ matrix.WORKING_DIRECTORY }}
    outputs:
      plugin-id: ${{ steps.metadata.outputs.plugin-id }}
      plugin-version: ${{ steps.metadata.outputs.plugin-version }}
      has-e2e: ${{ steps.check-for-e2e.outputs.has-e2e }}
      has-backend: ${{ steps.check-for-backend.outputs.has-backend }}
    env:
      GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check types
        run: npm run typecheck
      - name: Lint
        run: npm run lint
      - name: Unit tests
        run: npm run test:ci
      - name: Build frontend
        run: npm run build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go environment
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage
          workdir: ${{ matrix.WORKING_DIRECTORY }}

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: build:linux
          workdir: ${{ matrix.WORKING_DIRECTORY }}

      - name: Check for E2E
        id: check-for-e2e
        run: |
          if [ -f "playwright.config.ts" ]
          then
            echo "has-e2e=true" >> $GITHUB_OUTPUT
          fi

      - name: Sign plugin
        run: ROOT_URLS=http://localhost:3000 npm run sign
        if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN != '' }}

      # required jq to parse plugin.json
      # sudo apt install jq
      - name: Get plugin metadata
        id: metadata
        run: |
          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r

      - name: Archive Build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.metadata.outputs.plugin-id }}-${{ steps.metadata.outputs.plugin-version }}
          path: ${{ matrix.WORKING_DIRECTORY }}/${{ steps.metadata.outputs.plugin-id }}
          retention-days: 5

  playwright-tests:
    runs-on: self-hosted
    needs: [build, generate-matrix]
    timeout-minutes: 15
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    defaults:
      run:
        working-directory: ${{ matrix.WORKING_DIRECTORY }}
    env:
      GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    name: e2e test
    steps:
      - uses: actions/checkout@v4

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download built plugin
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.plugin-id }}-${{ needs.build.outputs.plugin-version }}
          path: ${{ matrix.WORKING_DIRECTORY }}/dist

      - name: Login to ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.GRAFANA_IMAGE_REPO }}

      - name: Execute permissions on binary
        if: needs.build.outputs.has-backend == 'true'
        run: |
          chmod +x ./dist/gpx_*

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dev dependencies
        run: npm ci
 
      - name: Stop all running containers
        run: docker stop $(docker ps -a -q) || true

      - name: Start Grafana
        run: |
          docker compose pull
          DEVELOPMENT=false docker compose up -d

      - name: Wait for Grafana to start
        uses: nev7n/wait_for_response@v1
        with:
          url: 'http://localhost:3000/'
          responseCode: 200
          timeout: 60000
          interval: 500

      - name: Install Playwright Browsers
        run: npm exec playwright install chromium --with-deps

      - name: Run Playwright tests
        id: run-tests
        run: npm run e2e

      - name: Docker logs
        if: ${{ always() && steps.run-tests.outcome == 'failure' }}
        run: |
          docker logs optiop-optiop-poweredstorage-app >& grafana-server.log

      - name: Stop grafana docker
        run: docker compose down

      - name: Upload server log
        uses: actions/upload-artifact@v4
        if: ${{ always() && steps.run-tests.outcome == 'failure' }}
        with:
          name: ${{ matrix.GRAFANA_IMAGE.NAME }}-v${{ matrix.GRAFANA_IMAGE.VERSION }}-${{github.run_id}}-server-log
          path: grafana-server.log
          retention-days: 5

      # If your repository is public, the report will be public on the Internet so beware not to expose sensitive information.
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ always() && steps.run-tests.outcome == 'failure' }}
        with:
          name: playwright-report-${{ matrix.GRAFANA_IMAGE.NAME }}-v${{ matrix.GRAFANA_IMAGE.VERSION }}-${{github.run_id}}
          path: playwright-report/
          retention-days: 5
