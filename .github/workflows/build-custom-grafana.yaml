name: Build Custom Grafana

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string 

jobs:
  generate-matrix:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set matrix
        id: set-matrix
        run: |
          matrix=$(find . -type d -name 'optiop*' | jq -R '{WORKING_DIRECTORY: .}' | jq -s '{include: .}' | tr -d '\n')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

  build-plugin:
    name: Build, lint and unit tests
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    defaults:
      run:
        working-directory: ${{ matrix.WORKING_DIRECTORY }}
    outputs:
      plugin-id: ${{ steps.metadata.outputs.plugin-id }}
      plugin-version: ${{ steps.metadata.outputs.plugin-version }}
      has-backend: ${{ steps.check-for-backend.outputs.has-backend }}
    env:
      GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check types
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Unit tests
        run: npm run test:ci

      - name: Build frontend
        run: npm run build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go environment
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage
          workdir: ${{ matrix.WORKING_DIRECTORY }}

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: build:linux
          workdir: ${{ matrix.WORKING_DIRECTORY }}

      - name: Sign plugin
        run: ROOT_URLS=http://localhost:3000 npm run sign
        if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN != '' }}

      # required jq to parse plugin.json
      # sudo apt install jq
      - name: Get plugin metadata
        id: metadata
        run: |
          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r

      - name: Archive Build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.metadata.outputs.plugin-id }}-${{ steps.metadata.outputs.plugin-version }}
          path: ${{ matrix.WORKING_DIRECTORY }}/${{ steps.metadata.outputs.plugin-id }}
          retention-days: 5

  build-image:
    name: Build docker image
    needs: build-plugin
    runs-on: ubuntu-latest
    outputs:
      plugin-id: ${{ needs.build-plugin.outputs.plugin-id }}
      plugin-version: ${{ needs.build-plugin.outputs.plugin-version }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Create plugins directory
        run: mkdir -p plugins

      - name: Download plugin
        uses: actions/download-artifact@v4
        with:
          path: plugins/${{ needs.build-plugin.outputs.plugin-id }}
          name: ${{ needs.build-plugin.outputs.plugin-id }}-${{ needs.build-plugin.outputs.plugin-version }}

      - name: see the plugin
        run: ls plugins    

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build grafana image
        run: |
          docker build -t \
           -t  ${{ inputs.image-name }}:${{ steps.vars.outputs.sha_short }} \
           -t  ${{ inputs.image-name }}:latest \
          -f- . <<EOF
            FROM grafana/grafana:latest
            USER grafana
            COPY ./plugins/ /var/lib/grafana/plugins/
          EOF

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Push Docker image to ECR
        run: |
          docker push ${{ inputs.image-name }}:latest
          docker push ${{ inputs.image-name }}:${{ steps.vars.outputs.sha_short }}
