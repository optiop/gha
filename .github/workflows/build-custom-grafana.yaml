---
name: Build Custom Grafana

on:  # yamllint disable-line rule:truthy
  workflow_call:
    secrets:
      grafana-access-policy-token:
        description: 'Grafana access policy token used to sign the plugins'
        required: true

jobs:
  generate-matrix:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      root-url: ${{ steps.values.outputs.root-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set matrix
        id: set-matrix
        run: |
          matrix=$(find . -type d -name 'optiop*' | \
              jq -R '{WORKING_DIRECTORY: .}' | \
              jq -s '{include: .}' | tr -d '\n')
          runner='{
            "runner": [
              {
                "tag": "amd64",
                "labels": ["ubuntu-latest"]
              }
            ]
          }'
          combined_matrix=$(jq -n --argjson include \
              "$matrix" --argjson runner "$runner" \
              '{include: $include.include, runner: $runner.runner}' \
              | tr -d '\n')
          echo "Generated matrix: $combined_matrix"
          echo "matrix=$combined_matrix" >> $GITHUB_OUTPUT

      - name: Read values.yaml
        id: values
        run: |
          ROOT_URL=$(cat values.yaml | yq '.grafana.rootURL')
          echo "root-url=${ROOT_URL}" >> $GITHUB_OUTPUT
          echo $ROOT_URL

  build-plugin:
    name: Build, lint and unit tests
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    defaults:
      run:
        working-directory: ${{ matrix.WORKING_DIRECTORY }}
    outputs:
      plugin-id: ${{ steps.metadata.outputs.plugin-id }}
      plugin-version: ${{ steps.metadata.outputs.plugin-version }}
      has-backend: ${{ steps.check-for-backend.outputs.has-backend }}
    env:
      GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.grafana-access-policy-token }}
      ROOT_URLS: ${{ needs.generate-matrix.outputs.root-url }}
    steps:
      - uses: actions/checkout@v4

      - name: check root
        run: echo $ROOT_URLS

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path:
            ${{ matrix.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check types
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Unit tests
        run: npm run test:ci

      - name: Build frontend
        run: npm run build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go environment
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: coverage
          workdir: ${{ matrix.WORKING_DIRECTORY }}

      - name: Build backend for AMD64
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: build:linux
          workdir: ${{ matrix.WORKING_DIRECTORY }}

      - name: Build backend for ARM64
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v3
        with:
          version: latest
          args: build:linuxARM64
          workdir: ${{ matrix.WORKING_DIRECTORY }}

      - name: Sign plugin
        run: npm run sign
        env:
          ROOT_URLS: ${{ needs.generate-matrix.outputs.root-url }}
        if: ${{ env.GRAFANA_ACCESS_POLICY_TOKEN != '' }}

      # required jq to parse plugin.json
      # sudo apt install jq
      - name: Get plugin metadata
        id: metadata
        run: |
          if [ -d "dist" ]; then
            echo "dist directory exists"
            ls -l dist
          else
            echo "dist directory does not exist"
            exit 1
          fi

          if [ -f "dist/plugin.json" ]; then
            echo "plugin.json file exists"
            cat dist/plugin.json
          else
            echo "plugin.json file does not exist"
            exit 1
          fi

          # Extract metadata from plugin.json
          export PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export PLUGIN_ARTIFACT=${PLUGIN_ID}-${PLUGIN_VERSION}.zip

          echo "plugin-id=${PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} \
            ${{ steps.metadata.outputs.plugin-id }} -r

      - name: Archive Build
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.metadata.outputs.plugin-id }}-\
            ${{ steps.metadata.outputs.plugin-version }}"
          path: "${{ matrix.WORKING_DIRECTORY }}/\
            ${{ steps.metadata.outputs.plugin-id }}"
          retention-days: 5

  build-image:
    name: Build docker image
    needs: build-plugin
    strategy:
      matrix:
        runner:
          - tag: amd64
            labels: [ubuntu-latest]
          - tag: arm64
            labels: [self-hosted, macOS]
    runs-on: ${{ matrix.runner.labels }}
    outputs:
      plugin-id: ${{ needs.build-plugin.outputs.plugin-id }}
      plugin-version: ${{ needs.build-plugin.outputs.plugin-version }}
      sha: ${{ steps.vars.outputs.sha }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read values.yaml
        id: values
        run: |
          GRAFANA_IMAGE=$(cat values.yaml | yq '.grafana.image')
          GRAFANA_TAG=$(cat values.yaml | yq '.grafana.tag')
          echo "grafana-image=${GRAFANA_IMAGE}:${GRAFANA_TAG}" >> $GITHUB_OUTPUT
          FRONTEND_IMAGE=$(cat values.yaml | yq '.frontend.image')
          echo "image=${FRONTEND_IMAGE}-${{ matrix.runner.tag }}" \
            >> $GITHUB_OUTPUT

      - name: Create plugins directory
        run: mkdir -p plugins

      - name: Download plugin
        uses: actions/download-artifact@v4
        with:
          path: plugins/${{ needs.build-plugin.outputs.plugin-id }}
          name: "${{ needs.build-plugin.outputs.plugin-id }}-\
            ${{ needs.build-plugin.outputs.plugin-version }}"

      - name: see the plugin
        run: ls -ltrh plugins

      - name: Set outputs
        id: vars
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: where am I
        run: |
          pwd
          ls -ltrh

      - name: Build grafana image
        run: |
          docker build -t \
            ${{ steps.values.outputs.image }}:${{ steps.vars.outputs.sha }} \
           -t ${{ steps.values.outputs.image }}:latest \
          -f- . <<EOF
            FROM ${{ steps.values.outputs.grafana-image }}
            USER root
            COPY ./plugins /var/lib/grafana/plugins/
            RUN chown -R grafana /var/lib/grafana/plugins
            RUN find /var/lib/grafana/plugins/ -type f -name 'gpx*' -exec chmod +x {} \;
            COPY src/grafana/config/grafana.ini /etc/grafana/grafana.ini
            COPY src/grafana/config/provisioning /etc/grafana/provisioning
            USER grafana
          EOF

      - name: Push Docker image to GHCR
        run: |
          docker push ${{ steps.values.outputs.image }}:${{ steps.vars.outputs.sha }}

      - name: Push Docker image to GHCR main
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ${{ steps.values.outputs.image }}:latest

  multi-archi-image:
    runs-on: ubuntu-latest
    needs: build-image
    env:
      SHA: ${{ needs.build-image.outputs.sha }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Read values.yaml
        id: values
        run: |
          FRONTEND_IMAGE=$(cat values.yaml | yq '.frontend.image')
          echo "image=${FRONTEND_IMAGE}" >> $GITHUB_OUTPUT

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set multi-archi image
        run: |
          docker manifest create \
            ${{ steps.values.outputs.image }}:${{ env.SHA }} \
             ${{ steps.values.outputs.image }}-arm64:${{ env.SHA }} \
             ${{ steps.values.outputs.image }}-amd64:${{ env.SHA }}
          docker manifest push \
            ${{ steps.values.outputs.image }}:${{ env.SHA }}
      - name: Push to latest in main branch
        if: github.ref == 'refs/heads/main'
        run: |
          docker manifest create \
            ${{ steps.values.outputs.image }}:latest \
             ${{ steps.values.outputs.image }}-arm64:${{ env.SHA }} \
             ${{ steps.values.outputs.image }}-amd64:${{ env.SHA }}
          docker manifest push ${{ steps.values.outputs.image }}:latest
