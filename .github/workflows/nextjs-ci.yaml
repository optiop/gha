---
name: Build and deploy NextJs site to AWS S3

# yamllint disable
on:
  workflow_call:
    inputs:
      path:
        required: false
        type: string
        default: "src"
      role-arn:
        required: true
        type: string
      s3-bucket:
        required: true
        type: string
      aws-region:
        required: false
        type: string
        default: eu-central-1
      base-path:
        required: false
        type: string
        default: ""

jobs:
  build:
    name: Build Website
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "22"

      - name: Setup subpath
        if: ${{ inputs.base-path != '' }}
        working-directory: ${{ inputs.path }}
        run: |
          if [ -f next.config.mjs ]; then
            echo "next.config.mjs found. Updating basePath..."
            sed -i  '/const nextConfig/a\
              basePath: "/${{ inputs.base-path }}",' next.config.mjs
          else
            echo "next.config.mjs not found, skipping."
          fi

      - name: Print content of next.config.mjs
        working-directory: ${{ inputs.path }}
        run: |
          if [ -f "next.config.mjs" ]; then
            echo "✅ next.config.mjs found. Printing content:"
            cat next.config.mjs
          else
            echo "☑️ next.config.mjs not found. Skipping step."
          fi

      - name: Configure npm authentication
        working-directory: ${{ inputs.path }}
        run: |
          echo "@optiop:registry=https://npm.pkg.github.com/optiop" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth: true" >> .npmrc

          echo "@optiop:registry=https://npm.pkg.github.com/optiop" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc
          echo "always-auth: true" >> ~/.npmrc

      - name: Install dependencies
        run: npm install
        working-directory: ${{ inputs.path }}

      - name: Search for Slidev in package.json
        id: slidev
        working-directory: ${{ inputs.path }}
        run: |
          if grep -q '"slidev"' package.json; then
            echo "Slidev found, enable variable slidev=true"
            echo "slidev=true" >> $GITHUB_OUTPUT
          else
            echo "Slidev not found"
          fi

      - name: Build the Next.js site
        run: |
          if [ "${{ steps.slidev.outputs.slidev }}" = "true" ]; then
            echo "Building Slidev presentation"
            npm run build -- --base=/${{ inputs.base-path }} 
          else
            echo "Building Next.js site"
            npm run build
          fi
        working-directory: ${{ inputs.path }}

      - name: Copy static files to out directory
        run: |
          ls -la ${{ inputs.path }}/out || true
          ls -la ${{ inputs.path }}/public || true
          ls -la ${{ inputs.path }} || true
          ls -la .
          cp -R ${{ inputs.path }}/public/* ${{ inputs.path }}/out/ || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: ${{ inputs.s3-bucket }}
          path: ${{ inputs.path }}/out/**
          retention-days: 30

  stage:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: ${{ inputs.s3-bucket }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ inputs.role-arn }}
          aws-region: ${{ inputs.aws-region }}

      - name: Deploy to S3
        run: |
          aws s3 sync . s3://${{ inputs.s3-bucket }}/${{ inputs.base-path }} --delete --acl public-read
        env:
          AWS_REGION: ${{ inputs.aws-region }}

      - name: Echo S3 name
        id: echo_s3
        run: echo "S3_BUCKET=${{ inputs.s3-bucket }}" >> $GITHUB_OUTPUT

      - name: Echo URL
        id: echo_url
        run: echo S3_URL=http://${{ inputs.s3-bucket }}.s3-website.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.base-path }} >> $GITHUB_OUTPUT

      - name: Print as comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: peter-evans/create-or-update-comment@v5
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Deployed to S3 bucket: ${{ inputs.s3-bucket }}
            Link: [${{ steps.echo_url.outputs.S3_URL }}](${{ steps.echo_url.outputs.S3_URL }})
          token: ${{ secrets.GITHUB_TOKEN }}
